#!/usr/bin/env python

import argparse
import json
import os
import sys
import tarfile

from gpi.installer import (
    install, uninstall, info, currently_installed, OverlapException)
from gpi.web import get_from_web, PackageNotFound, PackageReadError

parser = argparse.ArgumentParser(
    usage="\n"
    "       gpi install <package>\n"
    "       gpi install -f <file>\n"
    "       gpi uninstall <package>\n"
    "       gpi info <package>\n"
    "       gpi list")

parser.add_argument('command', nargs='+')
parser.add_argument("-f", "--file", help="install from file", default=False,
                    action="store")
args = parser.parse_args()

if args.file and args.command[0] != "install":
    exit("Cannot uninstall from a file!")

if args.file and len(args.command) > 1:
    exit("Specify either a file or a package name!")

# FIXME: Argument parsing is a total hack right now
if len(args.command) < 2 and not args.file and args.command[0] != 'list':
    exit("Usage: gpi [command] [package]")


def main():
    if args.command[0] == "install":
        if args.file:
            if not tarfile.is_tarfile(args.file):
                exit("File must be a tarfile!")
            t = tarfile.open(args.file, 'r')
            print("Installing {}".format(args.file))
        else:
            try:
                t = get_from_web(args.command[1])
            except PackageNotFound:
                exit("{} was not found".format(args.command[1]))
            except PackageReadError as e:
                exit("{} could not be read.".format(str(e)))

        manifest = json.load(t.extractfile('gpi.json'))
        print("Installing version " + manifest['version'])
        try:
            install(t, manifest)
        except OverlapException as e:
            print("Could not install package: conflicting file {}".format(e))
            sys.exit(1)
        print("{} {} installed successfully!".format(
            manifest['name'], manifest['version']))

    elif args.command[0] == "uninstall":
        uninstall_successful = uninstall(args.command[1])
        if uninstall_successful:
            print("{} uninstalled successfully!".format(args.command[1]))
        else:
            print("Could not uninstall {}!".format(args.command[1]))
    elif args.command[0] == 'info':
        try:
            package_dict = info(args.command[1])
        except PackageNotFound:
            print('Sorry, a package named' +
                  " {} couldn\'t be found :(".format(args.command[1]))
            return

        package_info = "Name: {}\n".format(package_dict['name'])
        if package_dict['description']:
            package_info += "Description: {}\n".format(package_dict['description'])
        if package_dict['installed']:
            package_info += "Version: {}\n".format(package_dict['version'])
        else:
            available_versions = map(
                lambda release: release['version'],
                package_dict['versions_available']
            )
            pretty_available_versions = reduce(
                lambda available, version: available + ', ' + version,
                available_versions
            )
            package_info += 'Available versions: {}\n'.format(pretty_available_versions)
        package_info += "Installed: {}".format(package_dict['installed'])
        print(package_info)

    elif args.command[0] == 'list':
        current_packages = ""
        for package in currently_installed():
            current_packages += "{}: v{}\n".format(package['identifier'], package['version'])
        # chop off last newline
        print(current_packages[:-1])


if __name__ == "__main__":
    sys.path.append(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    main()
